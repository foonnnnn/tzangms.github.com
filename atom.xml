<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Oceanic / 人生海海]]></title>
  <link href="http://tzangms.com/atom.xml" rel="self"/>
  <link href="http://tzangms.com/"/>
  <updated>2011-11-22T00:29:02+08:00</updated>
  <id>http://tzangms.com/</id>
  <author>
    <name><![CDATA[tzangms]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[搬出 App Engine]]></title>
    <link href="http://tzangms.com/2011/11/21/move-out-of-appengine/"/>
    <updated>2011-11-21T20:49:00+08:00</updated>
    <id>http://tzangms.com/2011/11/21/move-out-of-appengine</id>
    <content type="html"><![CDATA[<p>昨天把 <a href="http://www.myaudiocast.com/">MyAudioCast</a> 搬出了 <a href="http://code.google.com/appengine/">App Engine</a>, 花了一些時間改寫程式跟 migrate 資料, 最後搬到了 Linode 上。 而原本在 App Engine 上用的是 <a href="https://www.djangoproject.com/">Django</a> 1.1, 順便也把 Django 升到 1.3。</p>

<p>在這次搬家的過程花最多時間的就是在處理資料的轉換了, 而最初我以為要把資料從 App Engine 倒出來非常麻煩, 不過後來找到<a href="http://code.google.com/intl/en/appengine/docs/python/tools/uploadingdata.html">倒出資料的文件</a>, 就照著文件說明把資料倒出成 csv, 然後寫了幾支 <a href="https://docs.djangoproject.com/en/dev/howto/custom-management-commands/">Django command</a> 讀取 csv 寫進資料庫。</p>

<p>首先第一步就是建立 mapping 的 config 檔, 只需要下面這個指令就可以產生 datastore mapping 的 yaml。</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>appcfg.py create_bulkloader_config --filename=bulkloader.yaml .</span></code></pre></td></tr></table></div></figure>


<p>接著編輯這個文件, 找到 TODO 然後把 Foreignkey 都填上, connector 就填 csv, 然後就可以透過這份 yaml 執行下面這個指令來把資料倒成 csv 了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>appcfg.py download_data --config_file=bulkloader.yaml --filename=users.csv --kind=User .</span></code></pre></td></tr></table></div></figure>


<p>這樣一來需要的就只是讀取 csv 然後寫進 database 了, example script 像是下面這樣。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">csv</span>
</span><span class='line'>
</span><span class='line'><span class="n">items</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">DictReader</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s">&#39;/home/tzangms/users.csv&#39;</span><span class="p">,</span> <span class="s">&#39;rb&#39;</span><span class="p">))</span>
</span><span class='line'><span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">items</span><span class="p">:</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">()</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">username</span> <span class="o">=</span> <span class="n">item</span><span class="p">[</span><span class="s">&#39;username&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">item</span><span class="p">[</span><span class="s">&#39;email&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># other steps</span>
</span><span class='line'>    <span class="c"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本上, 只要依照以上的步驟就可以把資料都倒出來了, 當初還沒想到有這麼簡單的方法。
不過後來其實在 migrate 資料時就碰到了一些頭痛的問題。</p>

<h2>資料關聯的問題</h2>

<p>即便資料可以倒出成 csv, 在匯入資料時就碰到問題了, 因為如果 datastore 的 entity 指定了 parent 的話, key id 就可能會重覆, 像是 myaudiocast 的 Episode 的 parent 是指為 Podcast, 所以幾乎每個 podcast 的第一集節目的 key id 都是 1001, 所以當初有 800 多個 episode 的 key id 都是 1001。</p>

<p>本來想說應該用 podcast 這個 key id 可以用來區分不同 podcast 的 episode, 不過 Podcast 先前的 parent 也是設成 User, 所以也是重覆的, 有八百多個 1 吧。</p>

<p>幸好當初 Episode 同時存了 User 跟 Podcast 當 ForeignKey, 所幸還有 User 的值可以用 (內容就是 email), 不然還真的沒辦法。</p>

<p>其實我後來發現, 你也可以把很多東西預先寫起來在 dump 出來, 如果當任何東西都沒辦法作關聯的話, 至少把這個 entity 的網址給存下來, 之後再 parse 吧!</p>

<h2>帳號登入的問題</h2>

<p>由於先前 myaudiocast 直接用 google account 登入, 所以搬出來只好實作一下 <a href="http://code.google.com/apis/accounts/docs/OAuth2Login.html">Google OAuth 2</a>, 不過當初資料超少的, 我連 <a href="https://code.google.com/apis/console/">API Console</a> 都找不到, hmm &#8230; 我想當初應該還是在實驗階段吧。</p>

<p>Anyway, 因為 <a href="http://code.google.com/apis/accounts/docs/OpenID.html">Federated Login</a> 有點麻煩, 所以就選了跟 OAuth 2 來做, 實作起來簡單多了。</p>

<p>因為倒出來的帳號資料跟 Google 有關連的就只有 email, 所以要用 Google OAuth 2 的話, 至少也要拿到 email 才行, 可是翻來翻去根本找不到 OAuth 2 的 scope, 不過目前文件好多了 &#8230;</p>

<p>用下面這兩個 scope 應該就夠了, 當初找一整天都沒找到 &#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>https://www.googleapis.com/auth/userinfo.profile
</span><span class='line'>https://www.googleapis.com/auth/userinfo.email
</span></code></pre></td></tr></table></div></figure>


<p>看過 Facebook 的 scope 就覺得&#8230; Google 你未免也太囉嗦了 XD</p>

<h2>原本的網址失效</h2>

<p>因為 key id 的問題, 導致沒辦法直接用原本的 key id, 從 DataStore 轉進 SQL 的話, 原本的網址也就失效了。 不過這個解決的方法很簡單, 另外存一份原本的 key id 就好了, 當找不到 episode 時, 改用 key id 找看看, 沒有的話再秀 404, 目前看來狀況良好。</p>

<h2>掰掰了 App Engine</h2>

<p>這個月每天都在 App Engine 上花了大約 4 ~ 5 塊美金, 這樣下來一個月就要花上大約 150 塊, 真的是滿貴的。可是其實就用量來看, 搬到一台 Linode 512 都還可以撐, 一個月只需要 20 塊, 而且效能還比以往好上許多。 當然也許這可能就是 scalable 跟不用管機器的代價吧? XD</p>

<p>突然想到大約半年前還在 beta 的 App Engine, 常常 deploy 都要花上 5 ~ 10 分鐘才完成, 時間的花費真的是不值得, 雖然現在狀況好上很多, 不過價錢卻不是我付得起的, 甚至根本無 C/P 值可言, 我想也只能說掰掰了。</p>

<p>不過還是學到挺多東西的就是, 掰掰了 App Engine。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[處理被判別為惡意網站的經驗]]></title>
    <link href="http://tzangms.com/2011/11/11/handle-malicious-website/"/>
    <updated>2011-11-11T23:57:00+08:00</updated>
    <id>http://tzangms.com/2011/11/11/handle-malicious-website</id>
    <content type="html"><![CDATA[<p>前天由於某單位的網站被判定為惡意網站, 被植入了惡意的程式碼。 這個網站其實不是放在我們自家的伺服器上, 當時的技術主管是決定放在 Lunar Pages。 禮拜三中午一到公司, 就接到電話打來說他們網站出現問題, 被當成惡意網站怎麼辦, 哈 (苦笑)</p>

<p>由於完全沒碰過這個網站, 當初程式也是外包, 現在只好硬著頭皮解決, 不過當天有 4 個會要開, 就先請原本負責的同事處理, 不過完全沒找出問題就是, 同事還直接上 google 網站管理員說回報說誤判了 XD</p>

<p>我只好趁開會之間的空檔開始找, 一開始先用 firebug 看, 看到多出了一個異常的 request, 馬上跟同事要了 FTP 帳號想說用 grep 去找一下, 可是從 php 裡面根本找不到任何跡象, 不過後來翻到一支 javascript 會直接被導走, 還有幾隻 javascript 看起來怪怪的, 這當初是外包出去的, 我也不知道他們會不會從國外幹奇怪的 javascript 回來用。</p>

<!-- more -->


<p>最後發現一個聰明的點, 首頁原本該是 index.php, 可是被放了一支 index.htm, 所以首頁自然就變成了 index.htm, 然後這隻 index.htm 的功能是用 javascript 去載入 index.php 的內容進來, 接著做邪惡的事。 所以連進首頁根本不會發現異常, 檢查 index.php 也完全不會發現任何東西。</p>

<p>把 index.htm 移掉之後, 想說大功告成了, 可是似乎有 cache 似的, 所以我用 curl 去抓了 index.htm 的內容下來, 沒想到這才發現更驚人的事實, 這時候回來的是 302 的 Document, 可是裡面居然是有問題的連結! 後來接著看了 404 的 Document 也是一樣, 這就表示 Lunar Pages 整台都被搞了, 當下就是決定開一台 Linode 整個搬過去 (其實打從一開始就這麼想, 畢竟這網站放 LunarPages 未免也太奇怪)。後來根據 stopbadware.org 的資料, 大概有兩萬多個網站被植入東西了。</p>

<p>當然搬走後, 接下來就是要處理從黑名單移除這件事, 首先拔光 malicious code 之後就是去回報, 所以趕快去 Google 網站管理員加入這個網站, 然後回報。 不過先前在沒有任何處置的狀況之下, 已經被同事回報沒問題了 囧, 所以先前的 request 根本就被取消了。</p>

<p>最後直接上 <a href="http://stopbadware.org">stopbadware.org</a> 去回報, 回報說除了換主機之外, 也已經用幾個 malicious code 檢查的網站檢查過, 把檢查結果也都給過去, 最後隔天下午一點查看, 就發現從黑名單中移除了。</p>

<p>看來當初應該直接上 stopbadware.org 回報就好了, 因為一直到 stopbadware review 完, 可以正常瀏覽了, google 網站管理員還沒任何動作。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Piece]]></title>
    <link href="http://tzangms.com/2011/10/24/one-piece-in-a-month/"/>
    <updated>2011-10-24T10:05:00+08:00</updated>
    <id>http://tzangms.com/2011/10/24/one-piece-in-a-month</id>
    <content type="html"><![CDATA[<p>今天, 在一個月內看完了海賊王 1 ~ 520 集, 真是值得紀念的一刻。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App Engine 好貴]]></title>
    <link href="http://tzangms.com/2011/10/15/appengine-so-expensive/"/>
    <updated>2011-10-15T13:29:00+08:00</updated>
    <id>http://tzangms.com/2011/10/15/appengine-so-expensive</id>
    <content type="html"><![CDATA[<p>使用 <a href="http://code.google.com/intl/zh-TW/appengine/">App Engine</a> 的 <a href="http://www.myaudiocast.com">MyAudioCast</a> 已經一年多了, 雖然說前一陣子 App Engine 已經<a href="http://googleappengine.blogspot.com/2011/08/50-credit-for-new-billing-signups-and.html">離開 preview beta 成為正式的服務</a>了, 所以價格跟著提高, 雖然說有贈送 $50 可以用, 不過老實說我還真的沒有去研究價格到底是變成怎樣。</p>

<p>不過這一陣子 <a href="http://tzangms.com/2011/10/14/save-myaudiocast/">MyAudioCast 爆量</a>, 開始被收錢, 而且還不算少, 突然間才覺得真的是爆貴的!</p>

<p>就從 MyAudioCast 的例子來說好了, 由於大部分的 requests 都是 iTunes 來下載檔案, 以 MyAudioCast 的作法, 是透過程式記錄存取次數, 然後再轉址到真正的檔案, 所以做的事情基本上就只是計數器而已。 (當然這個 counter 有做 sharding 並且有用 memcache 處理)</p>

<p>可是從下面這個 App Engine 提供的 Resource Usage 圖表看來, 一天跑下來 CPU Time 都已經快吃光了, 而 CPU Time 的 Budget 還是給了 $4/每天! (是美金阿!)</p>

<p><a href="http://www.flickr.com/photos/tzangms/6245212699/" title="quota by tzangms, on Flickr"><img src="http://farm7.static.flickr.com/6048/6245212699_94c4c8eb88_b.jpg" width="775" height="254" alt="quota"></a></p>

<p>實際看一下 reqs/sec 的圖表, 最高也還不到 50 reqs/sec, 可是這樣下來, 每天給 5 塊的 bugdget 才不會 over quota, 所以每週會花上 35 塊美金, 這樣一個月下來需要花上 140 塊美金, 可是同樣 StickerAction 用的是 Linode 768, 做的事情 loading 比 MyAudioCast 重得多, 可是一個月也才 29.95 塊美金而已。</p>

<p><a href="http://www.flickr.com/photos/tzangms/6245212645/" title="reqs by tzangms, on Flickr"><img src="http://farm7.static.flickr.com/6219/6245212645_2ffcdeb90c_b.jpg" width="778" height="268" alt="reqs"></a></p>

<p>這樣的價格真的沒辦法接受, 難道這就是 scalable 的代價? 或是說新的價格根本不適合跑小網站? 總之, 得準備一下來搬離 App Engine 了。</p>

<p>我真懷疑是不是我搞錯的 App Engine 的計價方式阿?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[拯救 MyAudioCast]]></title>
    <link href="http://tzangms.com/2011/10/14/save-myaudiocast/"/>
    <updated>2011-10-14T00:37:00+08:00</updated>
    <id>http://tzangms.com/2011/10/14/save-myaudiocast</id>
    <content type="html"><![CDATA[<p>今天準備出門上班時突然下起了傾盆大雨, 索性就不去上班, 在家趕工作的 deadline 好了, 這樣一來也不會被打擾 (最近上班時 context switch 真的是非常嚴重), 畢竟目前手上的某個專案的規劃一直到昨天都還改, 昨天甚至整個邏輯都翻轉了。</p>

<p>然而後來又收到 Pixnet 來的訊息 ( <a href="http://pixnet.net">Pixnet</a> 提供 MyAudioCast CDN 贊助), 因為目前 <a href="http://www.myaudiocast.com">MyAudioCast</a> 的流量真的太高, 這禮拜每天都超過了 1TB, 所以希望我可以處理一下 XD</p>

<p>而流量會這麼高的原因主要是因為有幾個中國的 Podcast 算是滿熱門的(?), 三個小時就可以有近兩萬次的下載。 另外就是有 Podcast 上了 iTunes Store 的 Podcast 的 Top Chart (我是有點懷疑是因為這個原因啦), 所以一天也是幾萬次的下載。</p>

<p>其實先前就被警告過了 XD 所以已經有研究了一些解決辦法, 只是因為最近工作太忙, 沒有時間處理。 而今天剛好沒去上班, 就先投入 MyAudioCast 的救援工作, 至於工作 deadline 的處理就只好留待週末兩天加班趕工了。</p>

<p><img src="http://farm7.static.flickr.com/6157/6241181440_9acf5a321e_z.jpg" title="" alt="myaudiocast bandwith" /></p>

<p>上面這個流量圖, 算是拯救的成果, 不過目前 queue 還在繼續跑, 所以流量還會持續降, 接下來就持續觀察吧！ 其實還真該想個 business model, 可是沒什麼 page view, 連放廣告都嫌浪費力氣 XD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS5 release]]></title>
    <link href="http://tzangms.com/2011/10/13/ios5-release/"/>
    <updated>2011-10-13T10:10:00+08:00</updated>
    <id>http://tzangms.com/2011/10/13/ios5-release</id>
    <content type="html"><![CDATA[<p>今天 iOS5 釋出了, 我這支用了兩年的 iPhone 3Gs 也還可以升級, 真是不錯。 升級後速度沒什麼差, 跟原本一樣慢, 哈!</p>

<p>不過我想除了 iCloud 之外, 其他沒什麼太大差異, 終於又可以像之前用 MobileMe 一樣同步資料了, 只是不用花錢就是了, 得趕快來把行事曆改用 iCloud 同步, 不然同步 Google Calendar 其實挺困擾的。</p>

<p>iPhone 4s 趕快來吧!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From blogofile to octopress]]></title>
    <link href="http://tzangms.com/2011/10/09/from-blogofile-to-octopress/"/>
    <updated>2011-10-09T10:12:00+08:00</updated>
    <id>http://tzangms.com/2011/10/09/from-blogofile-to-octopress</id>
    <content type="html"><![CDATA[<p>上個禮拜就開始在玩 <a href="http://octopress.org">octopress</a>, 雖然一樣用 markdown 寫文, meta 也一樣是用 yaml, 不過比 <a href="http://www.blogofile.com/">blogofile</a> 貼心太多了。</p>

<p>所以昨天就花了一些時間, 寫程式把 blogofile 的檔案轉成 octopress 的格式, 主要就 octopress 檔案名稱格式有固定, 至於文章內的 yaml 其實差不多, 多加上個 layout: post, comments: true 參數, 以及轉換 categories 就完成了。</p>

<p>相對於 blogofile, octopress 主要方便的地方是 deploy 這件事, 先前 blogofile 是 deploy 到 s3, 還是自己寫程式丟上去, 而 octopress 直接就提供了一個 rake command 就直接輸入設定, 之後直接打 rake deploy 就可以丟上 github 了。</p>

<p>不過, 我覺得一定有一些人一定換了這類的 blog 系統之後, 就減少了發文的動力, 像我就是 XD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tumblr 開張 (tzang.ms)]]></title>
    <link href="http://tzangms.com/blog/new-tumblr/"/>
    <updated>2011-06-08T20:25:00+08:00</updated>
    <id>http://tzangms.com/blog/tumblr_開張_(tzang_ms)</id>
    <content type="html"><![CDATA[<p>其實我後悔把 blog 從 wordpress 改成 <a href="http://www.blogofile.com/">blogofile</a> 了 XD 不過很多人說用 blogofile 才是真男人! 其實我忘記他們用英文說的實際句子是什麼了, 不過反正就是這個意思 XD</p>

<p>anyway, 總之我前幾天跑去開了個 tumblr, 準備以後都在那邊寫, 因為真的太方便又簡單了阿!!! XD 本來想說把 tzangms.com 這個 domain 也轉過去, 反正 SEO 什麼的都是浮雲, 後來想到乾脆買一個新的 domain <a href="http://tzang.ms">tzang.ms</a>, 因為以前就很想買這個 domain。</p>

<p>所以這個 blog 還是先放著, 也許搞不好之後我會回心轉意, 反正這個 blog 都搬到 s3 了, 沒太多花錢的問題才是(?)</p>

<p>不覺得 <a href="http://tzang.ms">tzang.ms</a> 這個 domain 很帥嗎!?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[買了 Blue snowball]]></title>
    <link href="http://tzangms.com/stuff/blue-snowball/"/>
    <updated>2011-05-17T12:10:00+08:00</updated>
    <id>http://tzangms.com/stuff/買了_blue_snowball</id>
    <content type="html"><![CDATA[<p>禮拜日晚上突然說應該來錄一些 tutorial 才對, 所以就想起了之前一直想買的 <a href="http://www.bluemic.com/snowball/">blue snowball</a>, 順便可以方便錄 Podcast, 不然距離上一集已經一年多了 XD</p>

<p>所以就在 Y 拍上面開始找有沒有人在買的, 找到之後就馬上聯絡賣家, 想說能不能明天就帶回家 XD 沒想到賣家很快就回覆了, 而且還有現貨, 所以就直接約昨天下班的時候在昆陽捷運站面交, 超方便, 直接回家 XDDD</p>

<p>而且令人驚訝的是, 賣家居然看過我的 blog!!! 而且賣家人超好 $3250 還算我 $3100, 揪甘心!! 難道有看過部落格有差嗎? (咦)</p>

<p>後來跟這位賣家聊了好久, 音樂、程式的東西都聊, 除了他們的 Y 拍之外, 他們有一個 blog 叫 <a href="http://digilog.tw/">DigiLog</a> 也是介紹跟音樂相關的, 看了看之後比較多合成器、音源以及現在科技相關的, 有空可以去看看 XD</p>

<p>最後用 <a href="http://en.wikipedia.org/wiki/John_Cale">john cale</a> 彈過的木吉他以及 snowball 錄一段 <a href="http://streetvoice.com/music/vocalwei/song/138249/">hush 的出竅</a></p>

<object data="http://boos.audioboo.fm/swf/fullsize_player.swf" height="129" id="boo_embed_358292" type="application/x-shockwave-flash" width="400"><param name="movie" value="http://boos.audioboo.fm/swf/fullsize_player.swf" /><param name="scale" value="noscale" /><param name="salign" value="lt" /><param name="bgColor" value="#FFFFFF" /><param name="allowScriptAccess" value="always" /><param name="wmode" value="window" /><param name="FlashVars" value="mp3Author=tzangms&amp;mp3=http%3A%2F%2Faudioboo.fm%2Fboos%2F358292-blue-snowball.mp3%3Fsource%3Dembed&amp;mp3Title=blue+snowball+%E8%A9%A6%E9%8C%84&amp;mp3LinkURL=http%3A%2F%2Faudioboo.fm%2Fboos%2F358292-blue-snowball&amp;rootID=boo_embed_358292&amp;mp3Time=01.17pm+16+May+2011" /><a href="http://audioboo.fm/boos/358292-blue-snowball.mp3?source=embed">Listen!</a></object>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[關於 Django 1.3 的 staticfiles]]></title>
    <link href="http://tzangms.com/programming/django-1.3-staticfiles/"/>
    <updated>2011-04-26T09:10:00+08:00</updated>
    <id>http://tzangms.com/programming/關於_Django_1_3_的_staticfiles</id>
    <content type="html"><![CDATA[<p><a href="http://docs.djangoproject.com/en/dev/releases/1.3/">Django 1.3</a> 也出來好一陣子, 都快過一個月了, 剛好這一陣子有幾個新的 project, 就直接用 Django 1.3 來開發, 對 <a href="http://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/">staticfiles</a> 跟 <a href="http://docs.djangoproject.com/en/dev/topics/class-based-views/">class-based views</a> 稍微熟了一些, 就來記一下。</p>

<h2>原本的問題</h2>

<p>在 Django 1.3 之前, 是透過 MEDIA_ROOT / MEDIA_URL 來設定靜態檔存放的位置跟存取的網址, 不過其實在 deploy 時會有個問題, 就是程式需要的 css / js 會進版本控制, 而使用者上傳的檔案則可能是放在另外的檔案系統, 但是 Django 1.3 之前只有一個 MEDIA_ROOT 的設定, 所以變成是兩種類型的檔案需要混在一起, 而先前我就直接用 soft link 來解決這件事, 可是感覺很不舒服 XD</p>

<p>另外, 就是 Django 的建構是以 app 的方式, 所以可以很容易插進一個 third party 的 app 並開始運作, 幾乎沒有 code 會進到 VCS 裡, 不過當 app 有自己提供的靜態檔案時, 就得手動複製或是 link, 或者就是直接進 VCS 了。</p>

<h2>staticfiles 解決的問題</h2>

<p>Django 1.3 新增的 staticfiles 解決先前提到的幾個問題, 就是另外提供了另一個 STATIC_ROOT / STATIC_URL 用來放程式用的靜態檔, 而原本的 MEDIA_ROOT / MEDIA_URL 則存放使用者上傳的檔案, 這麼一來把兩種類型的靜態檔存放的地方切開, deploy 就方便多了, 只是&#8230; 原本有非常多的 MEDIA_URL 寫在大量的 templates 以及程式裡面, 要全部改成 STATIC_URL, 真的是要哭哭了 XDDD</p>

<p>當然 staticfiles 不只是提供另一組設定而已, 還有幾個 command, 最主要就是 <a href="http://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#django-admin-collectstatic">collectstatic</a> 這個指令, 用來收集各個 app 自行提供的靜態檔到指定的資料夾, 便於發佈靜態檔。</p>

<p>先前通常都是直接開一個 static 資料夾存放整個網站要用的靜態檔, 而 django admin 自行提供的靜態檔則是在 web server 另外指定路徑到 django/contrib/admin/media, 如果有其他 app 像是 <a href="https://bitbucket.org/izi/django-admin-tools/wiki/Home">django-admin-tools</a> 的話, 就得用複製或是 link 的方式處理, 挺麻煩的。</p>

<p>不過現在透過 collectstatic 這個 command 就可以把所有的靜態檔一起收集到 STATIC_ROOT 指定的資料夾, 所以可以很方便的 deploy 到別處去。而現在 <a href="http://docs.djangoproject.com/en/dev/howto/static-files/#serving-static-files-from-a-dedicated-server">Django 的文件</a>也直接給了一個 fabric script 示範如何 deploy, 也有透過 <a href="https://bitbucket.org/david/django-storages/wiki/Home">django-storages</a> deploy 到 S3 的 section。</p>

<p>有仔細看過文件的話, 就會知道現在 static 資料夾可以直接依附各個 app 下面, 要 deploy 時透過 collectstatic 來處理, 所以可以依附在各個 app 下面也解決了另一件事, 就是 javascript 的 locale 在 makemessages 的問題, 不過在這邊就不多談了, 應該用到的人也不是那麼多 XD</p>

<h2>設定範例</h2>

<p>以下是我用的設定檔對照, (以開發環境舉例)</p>

<p>原本是</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># settings.py</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="n">ROOT_PATH</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">__file__</span><span class="p">)</span>
</span><span class='line'><span class="n">MEDIA_URL</span> <span class="o">=</span> <span class="s">&#39;/static/&#39;</span>
</span><span class='line'><span class="n">MEDIA_ROOT</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">ROOT_PATH</span><span class="p">,</span> <span class="s">&#39;static&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># urls.py</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.conf</span> <span class="kn">import</span> <span class="n">settings</span>
</span><span class='line'><span class="k">if</span> <span class="n">settings</span><span class="o">.</span><span class="n">DEBUG</span><span class="p">:</span>
</span><span class='line'>    <span class="n">urlpatterns</span> <span class="o">+=</span> <span class="n">patterns</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">(</span><span class="s">r&#39;^static/(?P&lt;path&gt;.*)$&#39;</span><span class="p">,</span> <span class="s">&#39;django.views.static.serve&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="p">{</span><span class="s">&#39;document_root&#39;</span><span class="p">:</span> <span class="n">settings</span><span class="o">.</span><span class="n">MEDIA_ROOT</span><span class="p">}),</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>現在在 Django 1.3 變成是</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># settings.py</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="n">ROOT_PATH</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">__file__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 使用者上傳的檔案存放點</span>
</span><span class='line'><span class="n">MEDIA_ROOT</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">ROOT_PATH</span><span class="p">,</span> <span class="s">&#39;../media&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">MEDIA_URL</span> <span class="o">=</span> <span class="s">&#39;/media/&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># collectstatic 指令收集靜態檔後所存放的地方</span>
</span><span class='line'><span class="n">STATIC_ROOT</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">ROOT_PATH</span><span class="p">,</span> <span class="s">&#39;../asset&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">STATIC_URL</span> <span class="o">=</span> <span class="s">&#39;/asset/&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 存放原本的 css / js</span>
</span><span class='line'><span class="n">STATICFILES_DIRS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">ROOT_PATH</span><span class="p">,</span> <span class="s">&#39;static&#39;</span><span class="p">),</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># urls.py</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.conf</span> <span class="kn">import</span> <span class="n">settings</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.contrib.staticfiles.urls</span> <span class="kn">import</span> <span class="n">staticfiles_urlpatterns</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">settings</span><span class="o">.</span><span class="n">DEBUG</span><span class="p">:</span>
</span><span class='line'>    <span class="n">urlpatterns</span> <span class="o">+=</span> <span class="n">patterns</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">(</span><span class="s">r&#39;^media/(?P&lt;path&gt;.*)$&#39;</span><span class="p">,</span> <span class="s">&#39;django.views.static.serve&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="p">{</span><span class="s">&#39;document_root&#39;</span><span class="p">:</span> <span class="n">settings</span><span class="o">.</span><span class="n">MEDIA_ROOT</span><span class="p">}),</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># serve static files when DEBUG = True</span>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">+=</span> <span class="n">staticfiles_urlpatterns</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>真的是越來越複雜了&#8230; 其實我研究了好久才完全搞懂 Django 1.3 的 staticfiles 要怎麼配置, 不過&#8230; 怎麼還是沒有自動加 version number 的功能阿 &#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Pivot]]></title>
    <link href="http://tzangms.com/webdesign/css-pivot/"/>
    <updated>2011-04-26T01:13:00+08:00</updated>
    <id>http://tzangms.com/webdesign/CSS_Pivot</id>
    <content type="html"><![CDATA[<p><a href="http://www.csspivot.com/">CSS Pivot</a> 還滿方便的一個服務, 輸入網址後可以自己加上 custom css, 接著儲存可以拿到一個短網址, 然後 share 出去, 或許遠端討論可以這麼玩?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[終於把 StreetVoice 改完了]]></title>
    <link href="http://tzangms.com/life/new-streetvoice-is-done/"/>
    <updated>2011-04-18T22:13:00+08:00</updated>
    <id>http://tzangms.com/life/終於把_StreetVoice_改完了</id>
    <content type="html"><![CDATA[<p>其實 StreetVoice 改版完成也快一個月了, 兩年就這樣過去了, 本來是預估一年半就可以改完的, 不過其實這中間跑去支援金X獎、簡單生活節、文X會的案子、種花電信的案子, context switch 挺嚴重的, 所以導致 StreetVoice 改版完成時間一延就延了半年。</p>

<p>所以現在改版完了, 最近就是在 refactor, 還有處理很多以前留下來所謂的堪用就好的功能。</p>

<p>原本我進來的角色很尷尬, 什麼東西也都要不到, 然後主要的工作就是把 ASP/MSSQL 整個砍掉重練, 本來進來是要用 PHP, 不過後來我決定用 Python/Django, 當然這是個危險的決定, 我當時幾乎還不會 Python, 不過由於對於 PHP 未來感到無望, 所以才決定跳到 Python。 當然現在很慶幸當初做了這個決定, 否則我早就累死了。</p>

<p>[以下省略幾千字&#8230;]</p>

<p>所以我前一陣子受不了了, 跟老闆提了辭職, 開始找新工作, 準備在 StreetVoice 改版完後就離職。 所幸有幾個工作找上門來, 推掉了幾個, 談了幾個, 有幾個工作都好想去, 感覺他們都好聰明, 而且很熱血!</p>

<p>不過&#8230; 最後我還是被說服留了下來了。這中間當然也想了很多東西, 而過程&#8230; 就之後有機會再說吧 &#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最近超愛的一首歌, hush 的天文特徵]]></title>
    <link href="http://tzangms.com/music/hush-astronomy-features/"/>
    <updated>2011-04-14T23:10:00+08:00</updated>
    <id>http://tzangms.com/music/最近超愛的一首歌,_hush_的天文特徵</id>
    <content type="html"><![CDATA[<p><embed src="http://tw.streetvoice.com/static/player/MusicPlayer.swf?srv=tw.streetvoice.com&ph=music&getv=config&skinID=6&au=126254&listtype=1&listsd=8487&autoStart=false&autoPlay=false&isEmbed=true&jsPlayer=false" allowFullScreen="false" allowScriptAccess="always" scale="noscale" type="application/x-shockwave-flash" width="330" height="100"></embed></p>

<p>幾個月前, 聽到同事在談論著 <a href="http://tw.streetvoice.com/vocalwei/">Hush</a>, 所以當時就隨便挑了一首 Hush 的歌來聽, 樂器只有簡單的木吉他, 聽沒多久就因為工作繁忙就切掉, 沒繼續聽下去, 當時就這麼略過了 Hush 的歌曲, 錯過那個在數月後令我眼眶泛淚的沙啞嗓音。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[部落格轉換為 blogofile]]></title>
    <link href="http://tzangms.com/blog/blogofile/"/>
    <updated>2011-04-13T23:29:00+08:00</updated>
    <id>http://tzangms.com/blog/部落格轉換為_blogofile</id>
    <content type="html"><![CDATA[<p>由於收到了 <a href="http://www.webfaction.com">webfaction</a> 來的繳費通知, 剛好最近一直覺得花好多錢在主機費上面, 所以打算不續約了, 除了 twitthat 跟 stickeraction 之外, 儘管 myaudiocast 的流量費用有 pixnet 提供 cdn 支援, 可是現在 myaudiocast 的流量幾乎每天都超過 200G, 而 s3 費用也幾乎都每個月都燒掉我 30 ~ 40 塊美金 &#8230;</p>

<p>所以想說應該要來減少這方面的金錢的支出, 可以減少就盡量減少, 至少拿掉 webfaction, 一年可以省下 3000 多塊台幣, 反正 blog 也不是那麼常動來動去的, 所以就乾脆換成 <a href="http://www.blogofile.com">blogofile</a>, 全部產生靜態檔然後丟上 s3, 這樣就省很多了 XD 不過昨天 @othree 說放在 github 更省錢 XD</p>

<p>所以上週日花了一些時間在轉換, 先把 comments 從 wordpress 匯到 disqus, 然後修改一下 <a href="http://www.blogofile.com/documentation/migrating_blogs.html#wordpress">blogofile 提供的轉換 script</a> 讓 disqus 可以正常運作, 也避免 SEO 整個下降, 至少文章的網址都維持原樣。 現在終於順利轉換丟上了 s3, 原本的 comments 也都在, 部落格的 theme 也保留了下來, 不過還有很多東西要補的就是了。</p>

<p>另外, 想直接換為 blogofile 還有一個原因就是因為他支援 markdown, 最近因為 @othree 在推 markdown, 想說順便練習一下, 不過一直太忙, 還沒太多時間深入研究, 不過 @othree 的 <a href="http://markdown.tw">markdown.tw</a> 也都已經推出了 XD 有興趣的可以去看一下 :p</p>

<p>距離上一篇發文已經超過一個月了, 最近真的是好忙阿&#8230;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第二份工作滿兩年了]]></title>
    <link href="http://tzangms.com/life/2847/"/>
    <updated>2011-03-07T23:32:41+08:00</updated>
    <id>http://tzangms.com/life/第二份工作滿兩年了</id>
    <content type="html"><![CDATA[<p>時間過好快, 第二份工作好快就滿兩年了, 想想寫程式也 4 年多了, 但是這份工作跟上一份工作差別最大的就是, 從網路產業跑到文化產業, 從原本有主管罩到沒有人罩。 而後來也不小心當了主管, 從原本沒有任何制度開始慢慢建立, 然後多了許多向外溝通的工作, 而後來都是在處理大量跟人相關的問題, 不像是以前只要專心寫 code 就好了, 所以覺得好忙碌。</p>

<p>畢竟開始認真寫程式也才 4 年多, 而這份工作又從 php 轉到 python, 就好像把功力突然就廢掉了一般, 得重新學習, 而由於網路技術快速的更新, 所以下班得一直看書跟研究新的技術。 現在則是又因為當了主管, 就另外看起了關於技術管理相關的書籍, 像是因為有 programmer 是在北京, 所以看起了 <a href="http://www.amazon.com/Virtual-Team-Success-Practical-Distance/dp/0470532963">Virtual team success</a>,  以及 @xdite 推薦的 <a href="http://pragprog.com/titles/prj/ship-it">Ship it!</a> 以及 <a href="http://oreilly.com/catalog/9780596517717">Make things happen</a>, 真是忙呀 (茶)。</p>

<p>雖然在這份工作的期間, 我時常在推特上嚷嚷著說我要辭職, 沒想到我還真撐過了兩年, 我覺得我自己真是夠會撐的了 (笑)</p>

<p>不過這份工作也讓我學到了許多東西, 因為沒有人罩, 沒有人幫忙, 得自己處理掉許多事情, 所以也感覺自己成長了一些, 在思想上似乎也有進步許多。 當然免不了, 我還是覺得我跟小孩子一樣, 染了頭金髮, 還是想組個團嘶吼的唱著搖滾歌曲。</p>

<p>兩年過了, 當初進來把 asp 砍掉, 用 python 重練都還沒練完, 應該這個月底可以結束, 似乎改版完之後, 一切就應該海闊天空了才對, 不過對我來說, 仍是前途渺茫啊~ 不過還能撐多久呢? who knows?</p>

<p>總之還是得繼續學習繼續努力啊~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lettuce - Behaviour-driven development]]></title>
    <link href="http://tzangms.com/programming/2837/"/>
    <updated>2011-03-05T00:29:08+08:00</updated>
    <id>http://tzangms.com/programming/lettuce__behaviourdriven_development</id>
    <content type="html"><![CDATA[<p>前幾天看到 <a href="http://lettuce.it/">Lettuce</a> 覺得挺有趣的, 昨天一玩就玩了兩個小時, 玩到半夜兩點 &#8230;</p>

<p>沒想到我連做夢都在寫 test case, 然後一直到醒來腦袋還一直在想 unit test  &#8230; 然後就乾脆爬了起來, 一直到天亮才爬回去睡, 結果今天真是累死了 Orz</p>

<p>lettuce 有趣的地方是他的 feature 語法跟 steps, 我覺得真的挺有趣的, 甚至寫法文也行 XD</p>

<p>feature 像是下面這樣寫</p>

<pre><code>Feature: Manipulate strings
  In order to have some fun
  As a programming beginner
  I want to manipulate strings

  Scenario: Uppercased strings
    Given I have the string "lettuce leaves"
    When I put it in upper case
    Then I see the string is "LETTUCE LEAVES"</code></pre>


<p>然後 step 像是這樣</p>

<pre><code>>>> from lettuce import *
>>> @step('I have the string "(.*)"')
... def have_the_string(step, string):
...     world.string = string
...
>>> @step('I put it in upper case')
... def put_it_in_upper(step):
...     world.string = world.string.upper()
...
>>> @step('I see the string is "(.*)"')
... def see_the_string_is(step, expected):
...     assert world.string == expected, \
...         "Got %s" % world.string</code></pre>


<p>真是超有趣的!!</p>

<p>話說 lettuce 的文件中有用到 <a href="http://lxml.de/">lxml</a>, 好像挺不錯用的, 找時間來研究一下。</p>

<p>另外經過推友補充還有 <a href="https://github.com/rlisagor/freshen">Freshen</a> 跟 <a href="https://github.com/heynemann/pyccuracy">Pyccuracy</a> 都是 BDD 的工具。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bleach - An easy, HTML5, whitelisting HTML sanitizer.]]></title>
    <link href="http://tzangms.com/programming/2824/"/>
    <updated>2011-02-20T13:26:25+08:00</updated>
    <id>http://tzangms.com/programming/bleach__an_easy_html5_whitelisting_html_sanitizer_</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/jsocol/bleach">Bleach</a>, 不是 <a href="http://zh.wikipedia.org/wiki/黑崎一護">黑崎一護</a> 那個 bleach XD</p>

<p>前一陣子不知道什麼原因, 有人把 delicious feed 送到 django planet, 所以 django planet 就爆炸了, 今天努力的在清 rss, 突然又找到了 bleach, 這個先前遺忘了的 html sanitize 工具。 而目前 mozilla 的 <a href="http://addons.mozilla.org/">addons</a> 跟 <a href="http://support.mozilla.com">support</a> 也都用了 bleach。 有人還不知道 mozilla 的 addons 跟 support 都換成 django 了嗎?</p>

<p>然後因為最近 SV 終於快改版完了, 最後一個部分就是 user 頁面跟自定版型 / css 以及所謂的自定欄位。 又由於先前的 developer 完全不懂 xss 這件事, 任何 javascript 也都沒有檔, 所以有點頭痛, 所以想說來試試看 bleach 如何。</p>

<p>看看 <a href="https://github.com/jsocol/bleach/blob/master/bleach/tests/test_security.py">bleach 的 test case</a> 應該就會滿清楚的了。</p>

<p>而 django 的 user 可以參考一下這的 <a href="https://bitbucket.org/bkmontgomery/django-janitor/src">django-janitor</a></p>

<p>倒是 &#8230; 藍染雖然死了, 可是「最後的月牙天衝」未免也太弱了吧 &#8230;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Requests: Python HTTP Module (That Doesn’t Suck)]]></title>
    <link href="http://tzangms.com/programming/2821/"/>
    <updated>2011-02-19T23:52:00+08:00</updated>
    <id>http://tzangms.com/programming/requests_python_http_module_(that_doesn’t_suck)</id>
    <content type="html"><![CDATA[<p><a href="http://kennethreitz.com/blog/introducing-requests/">Requests: Python HTTP Module (That Doesn’t Suck)</a></p>

<p>一直都還滿喜歡 appengine urlfetch 的 api interface, Requests 就還滿像的, 感覺找到了好物, 獲得救贖的感覺 XD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django 發佈安全性更新 2/8]]></title>
    <link href="http://tzangms.com/programming/2818/"/>
    <updated>2011-02-14T00:36:06+08:00</updated>
    <id>http://tzangms.com/programming/django_發佈安全性更新_28</id>
    <content type="html"><![CDATA[<p>這篇也 delay 了好多天, 在 2/8 <a href="http://www.djangoproject.com/weblog/2011/feb/08/security/">Django 發佈了安全性更新</a>, 主要是針對 <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">CSRF</a> 這件事。</p>

<p>如果有用 Django 1.2 的人就一定知道 csrf 這個東西, 畢竟 Django 1.2 預設開啟了 csrf, csrf 簡單來說就是防止假造的 POST request, 不過其實 csrf 並沒有對 XMLHttpRequest 的 POST 做處理, 畢竟瀏覽器限制 XMLHttpRequest 得在同一個 domain 跟 protocol。</p>

<p>不過在文中提到, 現在攻擊者可以透過瀏覽器外掛跟 redirect (?) 來利用 XMLHttpRequest 跨過 csrf 保護, 所以 <a href="http://weblog.rubyonrails.org/2011/2/8/csrf-protection-bypass-in-ruby-on-rails">Rails 在同一天也發佈了 patch</a>, 用以防止 XMLHttpRequest 的 csrf。</p>

<p>不過其實這有點頭痛, 每個 Ajax POST request 都要加 csrf token 上去, 我的媽呀 &#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django 1.3 繁體中文翻譯人員徵求]]></title>
    <link href="http://tzangms.com/django/2817/"/>
    <updated>2011-02-14T00:13:07+08:00</updated>
    <id>http://tzangms.com/django/django_1_3_繁體中文翻譯人員徵求</id>
    <content type="html"><![CDATA[<p>前一陣子 Django 把 locale 翻譯的工作丟上了 <a href="http://www.transifex.net/projects/p/django/">transifex</a>, 上禮拜剛註冊完 transifex 的帳號後, 想說要來翻譯一下的, 回到 twitter 剛好看到 @jezdez 在徵 coordinator, 當中包含了 zh-TW tream, 所以就直接跟他說我可以幫忙, 下一個 reply 他就幫我加好了 coordinator。</p>

<p>接下來幾天把 django core 翻到了 91%, 不過後來最近真的因為公事繁忙, 所以沒能持續翻下去, 都只能抽時間來翻, 不過 Django 1.3 在這個月 21 號就要 final release 了, 所以得找人來幫忙一下, 其實我早該貼這篇文了, 只是最近真的粉忙 ~&#8221;~</p>

<p>不過除了找人一起幫忙翻之外, 其實在翻譯的時候, 我想還是需要有人可以討論一下一些用字遣詞的部份, 所以徵求一下 Django zh-TW locale 的翻譯人員~ 註冊一下 transifex 後跟我說一聲吧!</p>

<p>題外話, 當然依照以往 Django release 的慣例, 總是會 delay 的 (笑)</p>
]]></content>
  </entry>
  
</feed>
